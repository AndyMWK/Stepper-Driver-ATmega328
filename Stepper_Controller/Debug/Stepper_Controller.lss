
Stepper_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000510  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000584  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f1  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076f  00000000  00000000  00000f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c1  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041c  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000253  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000021b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  88:	0c 94 86 02 	jmp	0x50c	; 0x50c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <update_full_stepping>:

#include "Full_Stepping.h"

static volatile enum full_step current_step = T1_A;

void update_full_stepping(full_stepper *channel) {
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	fc 01       	movw	r30, r24
	switch(current_step) {
  96:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  9a:	91 30       	cpi	r25, 0x01	; 1
  9c:	b9 f0       	breq	.+46     	; 0xcc <update_full_stepping+0x3c>
  9e:	28 f0       	brcs	.+10     	; 0xaa <update_full_stepping+0x1a>
  a0:	92 30       	cpi	r25, 0x02	; 2
  a2:	f1 f0       	breq	.+60     	; 0xe0 <update_full_stepping+0x50>
  a4:	93 30       	cpi	r25, 0x03	; 3
  a6:	99 f1       	breq	.+102    	; 0x10e <update_full_stepping+0x7e>
  a8:	66 c0       	rjmp	.+204    	; 0x176 <update_full_stepping+0xe6>
		case T1_A:
			//Phase A operation
			if(!(channel->reverse)) {
  aa:	82 81       	ldd	r24, Z+2	; 0x02
  ac:	81 11       	cpse	r24, r1
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <update_full_stepping+0x28>
				PORTB |= (1 << PHASE_A_POSITIVE);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	03 c0       	rjmp	.+6      	; 0xbe <update_full_stepping+0x2e>
			} else {
				PORTB |= (1 << PHASE_A_NEGATIVE);
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	85 b9       	out	0x05, r24	; 5
			}
		
			//Phase B operation
			PORTB &= ~((1 << PHASE_B_POSITIVE) | (1 << PHASE_B_NEGATIVE));
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	89 7f       	andi	r24, 0xF9	; 249
  c2:	85 b9       	out	0x05, r24	; 5
			current_step = T2_A;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
  ca:	55 c0       	rjmp	.+170    	; 0x176 <update_full_stepping+0xe6>
		
		case T2_A:
			//Phase A Operation
			PORTB &= ~((1 << PHASE_A_POSITIVE) | (1 << PHASE_A_NEGATIVE));
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8f 73       	andi	r24, 0x3F	; 63
  d0:	85 b9       	out	0x05, r24	; 5
		
			//Phase B operation
			PORTB |= (1 << PHASE_B_POSITIVE);
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	85 b9       	out	0x05, r24	; 5
			current_step = T3_A;
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
  de:	4b c0       	rjmp	.+150    	; 0x176 <update_full_stepping+0xe6>
		
		case T3_A:
			//Phase A operation
			if(!(channel->reverse)) {
  e0:	82 81       	ldd	r24, Z+2	; 0x02
  e2:	81 11       	cpse	r24, r1
  e4:	07 c0       	rjmp	.+14     	; 0xf4 <update_full_stepping+0x64>
				PORTB &= ~(1 << PHASE_A_POSITIVE);
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	8f 7b       	andi	r24, 0xBF	; 191
  ea:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << PHASE_A_NEGATIVE);
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	06 c0       	rjmp	.+12     	; 0x100 <update_full_stepping+0x70>
			} else {
				PORTB &= ~(1 << PHASE_A_NEGATIVE);
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	8f 77       	andi	r24, 0x7F	; 127
  f8:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << PHASE_A_POSITIVE);
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	85 b9       	out	0x05, r24	; 5
			}
		
			//Phase B operation
			PORTB &= ~((1 << PHASE_B_POSITIVE) | (1 << PHASE_B_NEGATIVE));
 100:	85 b1       	in	r24, 0x05	; 5
 102:	89 7f       	andi	r24, 0xF9	; 249
 104:	85 b9       	out	0x05, r24	; 5
			current_step = T4_A;
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 10c:	34 c0       	rjmp	.+104    	; 0x176 <update_full_stepping+0xe6>
 10e:	ef 01       	movw	r28, r30
		
		case T4_A:
			//Phase A operation
			PORTB &= ~((1 << PHASE_A_POSITIVE) | (1 << PHASE_A_NEGATIVE));
 110:	85 b1       	in	r24, 0x05	; 5
 112:	8f 73       	andi	r24, 0x3F	; 63
 114:	85 b9       	out	0x05, r24	; 5
		
			//Phase B operation
			PORTB &= ~(1 << PHASE_B_POSITIVE);
 116:	85 b1       	in	r24, 0x05	; 5
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PHASE_B_NEGATIVE);
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	84 60       	ori	r24, 0x04	; 4
 120:	85 b9       	out	0x05, r24	; 5
			current_step = T1_A;
 122:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			//update the angle information
			if(!(channel->reverse)) {
 126:	82 81       	ldd	r24, Z+2	; 0x02
 128:	81 11       	cpse	r24, r1
 12a:	13 c0       	rjmp	.+38     	; 0x152 <update_full_stepping+0xc2>
				channel->angle = (channel->angle)+1.8;
 12c:	60 81       	ld	r22, Z
 12e:	71 81       	ldd	r23, Z+1	; 0x01
 130:	07 2e       	mov	r0, r23
 132:	00 0c       	add	r0, r0
 134:	88 0b       	sbc	r24, r24
 136:	99 0b       	sbc	r25, r25
 138:	0e 94 b9 01 	call	0x372	; 0x372 <__floatsisf>
 13c:	26 e6       	ldi	r18, 0x66	; 102
 13e:	36 e6       	ldi	r19, 0x66	; 102
 140:	46 ee       	ldi	r20, 0xE6	; 230
 142:	5f e3       	ldi	r21, 0x3F	; 63
 144:	0e 94 15 01 	call	0x22a	; 0x22a <__addsf3>
 148:	0e 94 81 01 	call	0x302	; 0x302 <__fixsfsi>
 14c:	79 83       	std	Y+1, r23	; 0x01
 14e:	68 83       	st	Y, r22
 150:	12 c0       	rjmp	.+36     	; 0x176 <update_full_stepping+0xe6>
			} else {
				channel->angle = (channel->angle)-1.8;
 152:	60 81       	ld	r22, Z
 154:	71 81       	ldd	r23, Z+1	; 0x01
 156:	07 2e       	mov	r0, r23
 158:	00 0c       	add	r0, r0
 15a:	88 0b       	sbc	r24, r24
 15c:	99 0b       	sbc	r25, r25
 15e:	0e 94 b9 01 	call	0x372	; 0x372 <__floatsisf>
 162:	26 e6       	ldi	r18, 0x66	; 102
 164:	36 e6       	ldi	r19, 0x66	; 102
 166:	46 ee       	ldi	r20, 0xE6	; 230
 168:	5f e3       	ldi	r21, 0x3F	; 63
 16a:	0e 94 14 01 	call	0x228	; 0x228 <__subsf3>
 16e:	0e 94 81 01 	call	0x302	; 0x302 <__fixsfsi>
 172:	79 83       	std	Y+1, r23	; 0x01
 174:	68 83       	st	Y, r22
			}
		
			break;
	}
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <init_timer1_full_stepping>:


//freq = 1/(T_step); sets up CTC Mode.
void init_timer1_full_stepping (uint16_t freq, full_stepper *channel) {
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	eb 01       	movw	r28, r22
	//Frequency = F_CPU/(2*N*(1+Value))
	
	TCCR1B |= (1 << WGM12) | (1 << CS12);
 182:	e1 e8       	ldi	r30, 0x81	; 129
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	90 81       	ld	r25, Z
 188:	9c 60       	ori	r25, 0x0C	; 12
 18a:	90 83       	st	Z, r25
	TIMSK1 |= (1 << OCIE1A);
 18c:	ef e6       	ldi	r30, 0x6F	; 111
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	90 81       	ld	r25, Z
 192:	92 60       	ori	r25, 0x02	; 2
 194:	90 83       	st	Z, r25
	OCR1A = (CPU_FREQ/(2*256*freq))-1;
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	38 2f       	mov	r19, r24
 19c:	33 0f       	add	r19, r19
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	74 e2       	ldi	r23, 0x24	; 36
 1a6:	84 ef       	ldi	r24, 0xF4	; 244
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 45 02 	call	0x48a	; 0x48a <__divmodsi4>
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	31 09       	sbc	r19, r1
 1b2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1b6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	DDRB |= (1 << DDB6)|(1 << DDB7) | (1 << DDB1) | (1 << DDB2);
 1ba:	84 b1       	in	r24, 0x04	; 4
 1bc:	86 6c       	ori	r24, 0xC6	; 198
 1be:	84 b9       	out	0x04, r24	; 4
	
	channel->angle = 0;
 1c0:	19 82       	std	Y+1, r1	; 0x01
 1c2:	18 82       	st	Y, r1
	channel->reverse = 0;
 1c4:	1a 82       	std	Y+2, r1	; 0x02
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <__vector_11>:
#include "Full_Stepping.h"

//creates full-stepping struct called channel
full_stepper channel;

ISR(TIMER1_COMPA_vect) {
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	//updates full stepping phases
	update_full_stepping(&channel);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 48 00 	call	0x90	; 0x90 <update_full_stepping>
}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <main>:

int main(void)
{
	//initialize full-stepping functionality with 120 Hz
	init_timer1_full_stepping(120, &channel);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	71 e0       	ldi	r23, 0x01	; 1
 21c:	88 e7       	ldi	r24, 0x78	; 120
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 be 00 	call	0x17c	; 0x17c <init_timer1_full_stepping>
    sei();
 224:	78 94       	sei
 226:	ff cf       	rjmp	.-2      	; 0x226 <main+0xe>

00000228 <__subsf3>:
 228:	50 58       	subi	r21, 0x80	; 128

0000022a <__addsf3>:
 22a:	bb 27       	eor	r27, r27
 22c:	aa 27       	eor	r26, r26
 22e:	0e 94 2c 01 	call	0x258	; 0x258 <__addsf3x>
 232:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_round>
 236:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__fp_pscA>
 23a:	38 f0       	brcs	.+14     	; 0x24a <__addsf3+0x20>
 23c:	0e 94 04 02 	call	0x408	; 0x408 <__fp_pscB>
 240:	20 f0       	brcs	.+8      	; 0x24a <__addsf3+0x20>
 242:	39 f4       	brne	.+14     	; 0x252 <__addsf3+0x28>
 244:	9f 3f       	cpi	r25, 0xFF	; 255
 246:	19 f4       	brne	.+6      	; 0x24e <__addsf3+0x24>
 248:	26 f4       	brtc	.+8      	; 0x252 <__addsf3+0x28>
 24a:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__fp_nan>
 24e:	0e f4       	brtc	.+2      	; 0x252 <__addsf3+0x28>
 250:	e0 95       	com	r30
 252:	e7 fb       	bst	r30, 7
 254:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__fp_inf>

00000258 <__addsf3x>:
 258:	e9 2f       	mov	r30, r25
 25a:	0e 94 1c 02 	call	0x438	; 0x438 <__fp_split3>
 25e:	58 f3       	brcs	.-42     	; 0x236 <__addsf3+0xc>
 260:	ba 17       	cp	r27, r26
 262:	62 07       	cpc	r22, r18
 264:	73 07       	cpc	r23, r19
 266:	84 07       	cpc	r24, r20
 268:	95 07       	cpc	r25, r21
 26a:	20 f0       	brcs	.+8      	; 0x274 <__addsf3x+0x1c>
 26c:	79 f4       	brne	.+30     	; 0x28c <__addsf3x+0x34>
 26e:	a6 f5       	brtc	.+104    	; 0x2d8 <__addsf3x+0x80>
 270:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__fp_zero>
 274:	0e f4       	brtc	.+2      	; 0x278 <__addsf3x+0x20>
 276:	e0 95       	com	r30
 278:	0b 2e       	mov	r0, r27
 27a:	ba 2f       	mov	r27, r26
 27c:	a0 2d       	mov	r26, r0
 27e:	0b 01       	movw	r0, r22
 280:	b9 01       	movw	r22, r18
 282:	90 01       	movw	r18, r0
 284:	0c 01       	movw	r0, r24
 286:	ca 01       	movw	r24, r20
 288:	a0 01       	movw	r20, r0
 28a:	11 24       	eor	r1, r1
 28c:	ff 27       	eor	r31, r31
 28e:	59 1b       	sub	r21, r25
 290:	99 f0       	breq	.+38     	; 0x2b8 <__addsf3x+0x60>
 292:	59 3f       	cpi	r21, 0xF9	; 249
 294:	50 f4       	brcc	.+20     	; 0x2aa <__addsf3x+0x52>
 296:	50 3e       	cpi	r21, 0xE0	; 224
 298:	68 f1       	brcs	.+90     	; 0x2f4 <__addsf3x+0x9c>
 29a:	1a 16       	cp	r1, r26
 29c:	f0 40       	sbci	r31, 0x00	; 0
 29e:	a2 2f       	mov	r26, r18
 2a0:	23 2f       	mov	r18, r19
 2a2:	34 2f       	mov	r19, r20
 2a4:	44 27       	eor	r20, r20
 2a6:	58 5f       	subi	r21, 0xF8	; 248
 2a8:	f3 cf       	rjmp	.-26     	; 0x290 <__addsf3x+0x38>
 2aa:	46 95       	lsr	r20
 2ac:	37 95       	ror	r19
 2ae:	27 95       	ror	r18
 2b0:	a7 95       	ror	r26
 2b2:	f0 40       	sbci	r31, 0x00	; 0
 2b4:	53 95       	inc	r21
 2b6:	c9 f7       	brne	.-14     	; 0x2aa <__addsf3x+0x52>
 2b8:	7e f4       	brtc	.+30     	; 0x2d8 <__addsf3x+0x80>
 2ba:	1f 16       	cp	r1, r31
 2bc:	ba 0b       	sbc	r27, r26
 2be:	62 0b       	sbc	r22, r18
 2c0:	73 0b       	sbc	r23, r19
 2c2:	84 0b       	sbc	r24, r20
 2c4:	ba f0       	brmi	.+46     	; 0x2f4 <__addsf3x+0x9c>
 2c6:	91 50       	subi	r25, 0x01	; 1
 2c8:	a1 f0       	breq	.+40     	; 0x2f2 <__addsf3x+0x9a>
 2ca:	ff 0f       	add	r31, r31
 2cc:	bb 1f       	adc	r27, r27
 2ce:	66 1f       	adc	r22, r22
 2d0:	77 1f       	adc	r23, r23
 2d2:	88 1f       	adc	r24, r24
 2d4:	c2 f7       	brpl	.-16     	; 0x2c6 <__addsf3x+0x6e>
 2d6:	0e c0       	rjmp	.+28     	; 0x2f4 <__addsf3x+0x9c>
 2d8:	ba 0f       	add	r27, r26
 2da:	62 1f       	adc	r22, r18
 2dc:	73 1f       	adc	r23, r19
 2de:	84 1f       	adc	r24, r20
 2e0:	48 f4       	brcc	.+18     	; 0x2f4 <__addsf3x+0x9c>
 2e2:	87 95       	ror	r24
 2e4:	77 95       	ror	r23
 2e6:	67 95       	ror	r22
 2e8:	b7 95       	ror	r27
 2ea:	f7 95       	ror	r31
 2ec:	9e 3f       	cpi	r25, 0xFE	; 254
 2ee:	08 f0       	brcs	.+2      	; 0x2f2 <__addsf3x+0x9a>
 2f0:	b0 cf       	rjmp	.-160    	; 0x252 <__addsf3+0x28>
 2f2:	93 95       	inc	r25
 2f4:	88 0f       	add	r24, r24
 2f6:	08 f0       	brcs	.+2      	; 0x2fa <__addsf3x+0xa2>
 2f8:	99 27       	eor	r25, r25
 2fa:	ee 0f       	add	r30, r30
 2fc:	97 95       	ror	r25
 2fe:	87 95       	ror	r24
 300:	08 95       	ret

00000302 <__fixsfsi>:
 302:	0e 94 88 01 	call	0x310	; 0x310 <__fixunssfsi>
 306:	68 94       	set
 308:	b1 11       	cpse	r27, r1
 30a:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__fp_szero>
 30e:	08 95       	ret

00000310 <__fixunssfsi>:
 310:	0e 94 24 02 	call	0x448	; 0x448 <__fp_splitA>
 314:	88 f0       	brcs	.+34     	; 0x338 <__fixunssfsi+0x28>
 316:	9f 57       	subi	r25, 0x7F	; 127
 318:	98 f0       	brcs	.+38     	; 0x340 <__fixunssfsi+0x30>
 31a:	b9 2f       	mov	r27, r25
 31c:	99 27       	eor	r25, r25
 31e:	b7 51       	subi	r27, 0x17	; 23
 320:	b0 f0       	brcs	.+44     	; 0x34e <__fixunssfsi+0x3e>
 322:	e1 f0       	breq	.+56     	; 0x35c <__fixunssfsi+0x4c>
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	88 1f       	adc	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	1a f0       	brmi	.+6      	; 0x334 <__fixunssfsi+0x24>
 32e:	ba 95       	dec	r27
 330:	c9 f7       	brne	.-14     	; 0x324 <__fixunssfsi+0x14>
 332:	14 c0       	rjmp	.+40     	; 0x35c <__fixunssfsi+0x4c>
 334:	b1 30       	cpi	r27, 0x01	; 1
 336:	91 f0       	breq	.+36     	; 0x35c <__fixunssfsi+0x4c>
 338:	0e 94 3e 02 	call	0x47c	; 0x47c <__fp_zero>
 33c:	b1 e0       	ldi	r27, 0x01	; 1
 33e:	08 95       	ret
 340:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__fp_zero>
 344:	67 2f       	mov	r22, r23
 346:	78 2f       	mov	r23, r24
 348:	88 27       	eor	r24, r24
 34a:	b8 5f       	subi	r27, 0xF8	; 248
 34c:	39 f0       	breq	.+14     	; 0x35c <__fixunssfsi+0x4c>
 34e:	b9 3f       	cpi	r27, 0xF9	; 249
 350:	cc f3       	brlt	.-14     	; 0x344 <__fixunssfsi+0x34>
 352:	86 95       	lsr	r24
 354:	77 95       	ror	r23
 356:	67 95       	ror	r22
 358:	b3 95       	inc	r27
 35a:	d9 f7       	brne	.-10     	; 0x352 <__fixunssfsi+0x42>
 35c:	3e f4       	brtc	.+14     	; 0x36c <__fixunssfsi+0x5c>
 35e:	90 95       	com	r25
 360:	80 95       	com	r24
 362:	70 95       	com	r23
 364:	61 95       	neg	r22
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	8f 4f       	sbci	r24, 0xFF	; 255
 36a:	9f 4f       	sbci	r25, 0xFF	; 255
 36c:	08 95       	ret

0000036e <__floatunsisf>:
 36e:	e8 94       	clt
 370:	09 c0       	rjmp	.+18     	; 0x384 <__floatsisf+0x12>

00000372 <__floatsisf>:
 372:	97 fb       	bst	r25, 7
 374:	3e f4       	brtc	.+14     	; 0x384 <__floatsisf+0x12>
 376:	90 95       	com	r25
 378:	80 95       	com	r24
 37a:	70 95       	com	r23
 37c:	61 95       	neg	r22
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	8f 4f       	sbci	r24, 0xFF	; 255
 382:	9f 4f       	sbci	r25, 0xFF	; 255
 384:	99 23       	and	r25, r25
 386:	a9 f0       	breq	.+42     	; 0x3b2 <__floatsisf+0x40>
 388:	f9 2f       	mov	r31, r25
 38a:	96 e9       	ldi	r25, 0x96	; 150
 38c:	bb 27       	eor	r27, r27
 38e:	93 95       	inc	r25
 390:	f6 95       	lsr	r31
 392:	87 95       	ror	r24
 394:	77 95       	ror	r23
 396:	67 95       	ror	r22
 398:	b7 95       	ror	r27
 39a:	f1 11       	cpse	r31, r1
 39c:	f8 cf       	rjmp	.-16     	; 0x38e <__floatsisf+0x1c>
 39e:	fa f4       	brpl	.+62     	; 0x3de <__floatsisf+0x6c>
 3a0:	bb 0f       	add	r27, r27
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <__floatsisf+0x36>
 3a4:	60 ff       	sbrs	r22, 0
 3a6:	1b c0       	rjmp	.+54     	; 0x3de <__floatsisf+0x6c>
 3a8:	6f 5f       	subi	r22, 0xFF	; 255
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	16 c0       	rjmp	.+44     	; 0x3de <__floatsisf+0x6c>
 3b2:	88 23       	and	r24, r24
 3b4:	11 f0       	breq	.+4      	; 0x3ba <__floatsisf+0x48>
 3b6:	96 e9       	ldi	r25, 0x96	; 150
 3b8:	11 c0       	rjmp	.+34     	; 0x3dc <__floatsisf+0x6a>
 3ba:	77 23       	and	r23, r23
 3bc:	21 f0       	breq	.+8      	; 0x3c6 <__floatsisf+0x54>
 3be:	9e e8       	ldi	r25, 0x8E	; 142
 3c0:	87 2f       	mov	r24, r23
 3c2:	76 2f       	mov	r23, r22
 3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <__floatsisf+0x5e>
 3c6:	66 23       	and	r22, r22
 3c8:	71 f0       	breq	.+28     	; 0x3e6 <__floatsisf+0x74>
 3ca:	96 e8       	ldi	r25, 0x86	; 134
 3cc:	86 2f       	mov	r24, r22
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	2a f0       	brmi	.+10     	; 0x3de <__floatsisf+0x6c>
 3d4:	9a 95       	dec	r25
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	da f7       	brpl	.-10     	; 0x3d4 <__floatsisf+0x62>
 3de:	88 0f       	add	r24, r24
 3e0:	96 95       	lsr	r25
 3e2:	87 95       	ror	r24
 3e4:	97 f9       	bld	r25, 7
 3e6:	08 95       	ret

000003e8 <__fp_inf>:
 3e8:	97 f9       	bld	r25, 7
 3ea:	9f 67       	ori	r25, 0x7F	; 127
 3ec:	80 e8       	ldi	r24, 0x80	; 128
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	08 95       	ret

000003f4 <__fp_nan>:
 3f4:	9f ef       	ldi	r25, 0xFF	; 255
 3f6:	80 ec       	ldi	r24, 0xC0	; 192
 3f8:	08 95       	ret

000003fa <__fp_pscA>:
 3fa:	00 24       	eor	r0, r0
 3fc:	0a 94       	dec	r0
 3fe:	16 16       	cp	r1, r22
 400:	17 06       	cpc	r1, r23
 402:	18 06       	cpc	r1, r24
 404:	09 06       	cpc	r0, r25
 406:	08 95       	ret

00000408 <__fp_pscB>:
 408:	00 24       	eor	r0, r0
 40a:	0a 94       	dec	r0
 40c:	12 16       	cp	r1, r18
 40e:	13 06       	cpc	r1, r19
 410:	14 06       	cpc	r1, r20
 412:	05 06       	cpc	r0, r21
 414:	08 95       	ret

00000416 <__fp_round>:
 416:	09 2e       	mov	r0, r25
 418:	03 94       	inc	r0
 41a:	00 0c       	add	r0, r0
 41c:	11 f4       	brne	.+4      	; 0x422 <__fp_round+0xc>
 41e:	88 23       	and	r24, r24
 420:	52 f0       	brmi	.+20     	; 0x436 <__fp_round+0x20>
 422:	bb 0f       	add	r27, r27
 424:	40 f4       	brcc	.+16     	; 0x436 <__fp_round+0x20>
 426:	bf 2b       	or	r27, r31
 428:	11 f4       	brne	.+4      	; 0x42e <__fp_round+0x18>
 42a:	60 ff       	sbrs	r22, 0
 42c:	04 c0       	rjmp	.+8      	; 0x436 <__fp_round+0x20>
 42e:	6f 5f       	subi	r22, 0xFF	; 255
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	8f 4f       	sbci	r24, 0xFF	; 255
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	08 95       	ret

00000438 <__fp_split3>:
 438:	57 fd       	sbrc	r21, 7
 43a:	90 58       	subi	r25, 0x80	; 128
 43c:	44 0f       	add	r20, r20
 43e:	55 1f       	adc	r21, r21
 440:	59 f0       	breq	.+22     	; 0x458 <__fp_splitA+0x10>
 442:	5f 3f       	cpi	r21, 0xFF	; 255
 444:	71 f0       	breq	.+28     	; 0x462 <__fp_splitA+0x1a>
 446:	47 95       	ror	r20

00000448 <__fp_splitA>:
 448:	88 0f       	add	r24, r24
 44a:	97 fb       	bst	r25, 7
 44c:	99 1f       	adc	r25, r25
 44e:	61 f0       	breq	.+24     	; 0x468 <__fp_splitA+0x20>
 450:	9f 3f       	cpi	r25, 0xFF	; 255
 452:	79 f0       	breq	.+30     	; 0x472 <__fp_splitA+0x2a>
 454:	87 95       	ror	r24
 456:	08 95       	ret
 458:	12 16       	cp	r1, r18
 45a:	13 06       	cpc	r1, r19
 45c:	14 06       	cpc	r1, r20
 45e:	55 1f       	adc	r21, r21
 460:	f2 cf       	rjmp	.-28     	; 0x446 <__fp_split3+0xe>
 462:	46 95       	lsr	r20
 464:	f1 df       	rcall	.-30     	; 0x448 <__fp_splitA>
 466:	08 c0       	rjmp	.+16     	; 0x478 <__fp_splitA+0x30>
 468:	16 16       	cp	r1, r22
 46a:	17 06       	cpc	r1, r23
 46c:	18 06       	cpc	r1, r24
 46e:	99 1f       	adc	r25, r25
 470:	f1 cf       	rjmp	.-30     	; 0x454 <__fp_splitA+0xc>
 472:	86 95       	lsr	r24
 474:	71 05       	cpc	r23, r1
 476:	61 05       	cpc	r22, r1
 478:	08 94       	sec
 47a:	08 95       	ret

0000047c <__fp_zero>:
 47c:	e8 94       	clt

0000047e <__fp_szero>:
 47e:	bb 27       	eor	r27, r27
 480:	66 27       	eor	r22, r22
 482:	77 27       	eor	r23, r23
 484:	cb 01       	movw	r24, r22
 486:	97 f9       	bld	r25, 7
 488:	08 95       	ret

0000048a <__divmodsi4>:
 48a:	05 2e       	mov	r0, r21
 48c:	97 fb       	bst	r25, 7
 48e:	1e f4       	brtc	.+6      	; 0x496 <__divmodsi4+0xc>
 490:	00 94       	com	r0
 492:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__negsi2>
 496:	57 fd       	sbrc	r21, 7
 498:	07 d0       	rcall	.+14     	; 0x4a8 <__divmodsi4_neg2>
 49a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__udivmodsi4>
 49e:	07 fc       	sbrc	r0, 7
 4a0:	03 d0       	rcall	.+6      	; 0x4a8 <__divmodsi4_neg2>
 4a2:	4e f4       	brtc	.+18     	; 0x4b6 <__divmodsi4_exit>
 4a4:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__negsi2>

000004a8 <__divmodsi4_neg2>:
 4a8:	50 95       	com	r21
 4aa:	40 95       	com	r20
 4ac:	30 95       	com	r19
 4ae:	21 95       	neg	r18
 4b0:	3f 4f       	sbci	r19, 0xFF	; 255
 4b2:	4f 4f       	sbci	r20, 0xFF	; 255
 4b4:	5f 4f       	sbci	r21, 0xFF	; 255

000004b6 <__divmodsi4_exit>:
 4b6:	08 95       	ret

000004b8 <__negsi2>:
 4b8:	90 95       	com	r25
 4ba:	80 95       	com	r24
 4bc:	70 95       	com	r23
 4be:	61 95       	neg	r22
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	8f 4f       	sbci	r24, 0xFF	; 255
 4c4:	9f 4f       	sbci	r25, 0xFF	; 255
 4c6:	08 95       	ret

000004c8 <__udivmodsi4>:
 4c8:	a1 e2       	ldi	r26, 0x21	; 33
 4ca:	1a 2e       	mov	r1, r26
 4cc:	aa 1b       	sub	r26, r26
 4ce:	bb 1b       	sub	r27, r27
 4d0:	fd 01       	movw	r30, r26
 4d2:	0d c0       	rjmp	.+26     	; 0x4ee <__udivmodsi4_ep>

000004d4 <__udivmodsi4_loop>:
 4d4:	aa 1f       	adc	r26, r26
 4d6:	bb 1f       	adc	r27, r27
 4d8:	ee 1f       	adc	r30, r30
 4da:	ff 1f       	adc	r31, r31
 4dc:	a2 17       	cp	r26, r18
 4de:	b3 07       	cpc	r27, r19
 4e0:	e4 07       	cpc	r30, r20
 4e2:	f5 07       	cpc	r31, r21
 4e4:	20 f0       	brcs	.+8      	; 0x4ee <__udivmodsi4_ep>
 4e6:	a2 1b       	sub	r26, r18
 4e8:	b3 0b       	sbc	r27, r19
 4ea:	e4 0b       	sbc	r30, r20
 4ec:	f5 0b       	sbc	r31, r21

000004ee <__udivmodsi4_ep>:
 4ee:	66 1f       	adc	r22, r22
 4f0:	77 1f       	adc	r23, r23
 4f2:	88 1f       	adc	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	1a 94       	dec	r1
 4f8:	69 f7       	brne	.-38     	; 0x4d4 <__udivmodsi4_loop>
 4fa:	60 95       	com	r22
 4fc:	70 95       	com	r23
 4fe:	80 95       	com	r24
 500:	90 95       	com	r25
 502:	9b 01       	movw	r18, r22
 504:	ac 01       	movw	r20, r24
 506:	bd 01       	movw	r22, r26
 508:	cf 01       	movw	r24, r30
 50a:	08 95       	ret

0000050c <_exit>:
 50c:	f8 94       	cli

0000050e <__stop_program>:
 50e:	ff cf       	rjmp	.-2      	; 0x50e <__stop_program>
